################################################################################################
2023/10/18:
	Two issues apart from the previous ones:
		1. repeated input
		2. lock the input after a off beat one.
	


################################################################################################
2023/10/17:
	Tonight continue to fix the alignment problem. The logic should be:
		- Player should recognize whether an input is on beat. And if on beat, on which beat.
		- Player could ask the beatsmanager what input time corresponds to which beat (if on beat).
		- If the input is on beat, player calls the start_attack(input_beat: int) method on weapon.
		- The weapon subscribe to the Beats manager, when input_beat == current_beat, execute attack.
		
	Result:
		- The method calculate_input_beat() is written for BeatsManager, but not tested.
		- The input_beat in player_statemachine is not resolved. Check start_attack()!
	
	
	
	
	

################################################################################################
2023/10/15:
	I'm very happy with recent progresses. The exploration on resources system is quite fruitful, also the signal system. 
	What to do next? Remember the ultimate goal recently is to build a model for test. 
	We need to test whether this game mechanism is fun. Therefore this "Instant overlap detection at beat time" attack mechanis is totally sufficient.
	What else is needed for this prototype to be testable?
	
		1. Input alignment with beats.
		2. Monster attack pattern.
		3. UI and visulization of all the moves.
		4. Expandable designing of moves (both player's and monster's).
	
	What's next goal to pick? The one with most risk or the one that's simplist?
	The former would be 2 and 3? Since animation, graphics, and UI is what we haven't tried.
	The latter maybe 4. Resource is what I familiar with. But thinking closely, this is a goal we can for sure accomplish. Should focus on more risky ones first.
	1 however is crucial. 
	
	Conclusion: 
		First do 1, and then 2 & 3 together. Finally 4. Next let's plan about how to implement 1.
	
	To do: 
		If an input is not on_beat, it fails. If it is on_beat, execute. Since input only affects the player, we can put the code in player.gd
		Can also add a method is_on_beat in beats_manager? Yes, since the monster also need this function? (actaully no, but I already written the function in beatsmanager.)
	
		Note the difference between event.is_action and is_action_pressed. To be fixed.
		_input() function in player.gd needs fixing. 

		functions in BeatsManager also needs fixing. 



################################################################################################
2023/10/13:
	There are several ways to implement attack:
		1. Instant overlap detection at beat time. 
		2. A weapon with hitbox
		3. Projectiles
	Very hesitant on which to use. Maybe because these are all new methods that I'm not familiar with.
	Maybe we can try all of them! Start from 1, which is the easiest.

	Steps to realize 1:
		- Create a new Area2D child of player node, which is the detection area.
		- At attack execution time, detect whether monster in inside the area.
		- Damage the monster.
	The above steps finished. Now the next step: 
		- make the attack into signals, and the monster listen to the signal.
		- make monster able to attack the player.
		
		For signals:
			- Create node2d named weapon, which handles all the attacks.
			- weapon should send out signals, while monster register to this signal.
			Question: what should the signal be like?
			
	Result:
		- Finished constructing signal based weapon system.
		- Attack method 1 implemented.
		
		
		
################################################################################################
2023/10/12:
	To do:
		Decided to make a simplist weapon hit-box, and a simplist monster hurt-box. 
		Worry about various types of weapons later.
		


################################################################################################
2023/10/12:
	To do:
		Not so sure. Just learned the way to construct componenets and put them together.
		Resource is what needed to be tried.
		
		I already created Attack_move as a customized resource.
		I guess I need to align things to the beat.
		Healthbar system.
		
		Resource can define not only variables, but also methods and signals! Great!
		
	Result:
		I created a healthbar with methods, but no signals. Next step is to add signals.
		Signals successfully added.
		Now maybe to check how other people make the rpg weapon system? 
		Need to maybe let the weapon to hurt target.
		

################################################################################################
2023/09/28:
	To do:
		1. Bossï¼š Kirin is a good choice.
		2. Input System
		3. Dance moves
	After consideration, I believe its better to first construct a normal battle where the boss and player can 
	hurt each other, and then think about aligning the time with beats.



################################################################################################
2023/09/27:
	To do:
		1. Add sound to beats, and other moves (To check input accuracy)
		2. Time stamp
		3. Construct input system (to recognize beats) # Is the input system independent from attack types? Do we need a separate button for entering(exiting) dance state? 
		4. Camera
		5. Create boss  # How many moves does a typical Monster Hunter boss have?
	
	Results:
		1. Event system responds very fast. Finished first try on audio. 
		2. Done. -> Time.get_unix_time_from_system()
		3. 
		4. Simple one added.
		5. 
